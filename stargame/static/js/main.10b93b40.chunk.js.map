{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["StarDisplay","props","utils","range","count","map","starId","key","className","PlayNumber","number","style","backgroundColor","colors","CheckStatus","onClick","PlayAgain","color","gameStatus","Game","useState","random","stars","setStars","availableNums","setAvailableNums","candidateNums","setCandidateNums","timer","setTimer","useEffect","length","timerId","setTimeout","clearTimeout","setGameState","newCandidateNums","sum","newAvailableNums","filter","n","includes","randomSumIn","useGameState","candidateAreWrong","startNewGame","currStatus","concat","cn","StarMatch","gameId","updateGameId","available","used","wrong","candidate","arr","reduce","acc","curr","min","max","Array","from","_","i","Math","floor","sets","sums","j","len","candidateSet","candidateSum","push","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.10b93b40.chunk.js","sourcesContent":["import React,{ useState, useEffect } from 'react';\nimport './App.css';\n\nconst StarDisplay = props => {\n  return(\n    <>\n      {utils.range(1,props.count).map(starId => <div key={starId} className=\"star\" />)}\n    </>\n  );\n}\n\nconst PlayNumber = props => {\n\n  return (\n    <>\n      {utils.range(1,9).map(number => <button key = {number}\n        className=\"number\"\n        style = {{backgroundColor: colors[props.CheckStatus(number)]}}\n        onClick={() => props.onClick(number,props.CheckStatus(number))}\n        >{number}</button>)}\n    </>\n  );\n}\n\nconst PlayAgain = props => (\n  <div className=\"game-done\">\n    <div\n    className=\"message\"\n    style = {{color: props.gameStatus === 'lost' ? 'red' : 'green'}}\n    >\n      {props.gameStatus==='lost' ? 'Game Over' : 'Nice'}\n    </div>\n    <button onClick = {props.onClick}> Play Again</button>\n  </div>\n);\n\nconst useGameState = () => {\n  const [stars, setStars] = useState(utils.random(1,9));\n  const [availableNums, setAvailableNums] = useState(utils.range(1,9));\n  const [candidateNums, setCandidateNums] = useState([])\n  const [timer, setTimer] = useState(10);\n  useEffect( () => {\n    if(timer >0 && availableNums.length > 0){\n      const timerId = setTimeout(() => {\n        setTimer(timer-1);\n      },1000);\n    return () => clearTimeout(timerId);\n  }\n  });\n  const setGameState = (newCandidateNums) => {\n    if (utils.sum(newCandidateNums) !== stars ) {\n      setCandidateNums(newCandidateNums);\n    } else {\n      const newAvailableNums = availableNums.filter(n => ! newCandidateNums.includes(n));\n      setStars(utils.randomSumIn(newAvailableNums, 9));\n      setAvailableNums(newAvailableNums);\n      setCandidateNums([]);\n    }\n  };\n  return {stars, availableNums, candidateNums, timer, setGameState}\n};\n\nconst Game = (props) => {\n\n  const {\n    stars,\n    availableNums,\n    candidateNums,\n    timer,\n    setGameState,\n  } = useGameState();\n\n  const candidateAreWrong = utils.sum(candidateNums) > stars;\n  const gameStatus = availableNums.length === 0 ? 'won' :  timer === 0 ? 'lost' : 'active';\n  const NumStatus = (number) => {\n    if(!availableNums.includes(number)){\n      return 'used'\n    }\n    if(candidateNums.includes(number)){\n      return candidateAreWrong ? 'wrong' : 'candidate';\n    }\n    return 'available'\n  };\n\n  const onNumberClick = (number, currStatus) => {\n    if (gameStatus !=='active' || currStatus === 'used'){\n      return;\n    }\n\n    const newCandidateNums = currStatus === 'available' ?\n      candidateNums.concat(number) : candidateNums.filter(cn => cn !== number);\n\n    setGameState(newCandidateNums);\n  };\n\n\n\n\n  return (\n    <div className=\"game\">\n      <div className=\"help\">\n        Pick 1 or more numbers that sum to the number of stars\n      </div>\n      <div className=\"body\">\n        <div className=\"left\">\n          { gameStatus === 'active' ?\n            <StarDisplay count={stars}/>\n          :\n             <PlayAgain onClick={props.startNewGame} gameStatus={gameStatus}/>\n           }\n\n        </div>\n        <div className=\"right\">\n          <PlayNumber count={stars} CheckStatus={NumStatus} onClick={onNumberClick}/>\n        </div>\n      </div>\n      <div className=\"timer\"> Time Remaining : {timer} </div>\n    </div>\n  );\n}\n\nconst StarMatch = () => {\n  const [gameId,updateGameId] = useState(1);\n  return <Game key={gameId} startNewGame={() => updateGameId(gameId+1)}/>\n}\nconst colors = {\n  available: 'lightgray',\n  used:'lightgreen',\n  wrong:'lightcoral',\n  candidate:'deepskyblue',\n}\n\nconst utils = {\n  // Sum an array\n  sum: arr => arr.reduce((acc,curr) => acc+curr,0),\n  // create an array of numbers between min and max (edges included)\n  range: (min,max) => Array.from({length: max - min + 1},(_,i) => min + i),\n  // pick a random number between min and max (edges included)\n  random: (min,max) => min + Math.floor(Math.random() * (max - min + 1)),\n  // Given an array of numbers and a max...\n  // Pick a random sum (< max) from the set of all available sums in arr\n  randomSumIn: (arr,max) => {\n    const sets = [[]];\n    const sums = [];\n    for(let i=0; i< arr.length;i++){\n      for(let j=0, len = sets.length; j < len; j++){\n        const candidateSet = sets[j].concat(arr[i]);\n        const candidateSum = utils.sum(candidateSet);\n        if (candidateSum <= max) {\n          sets.push(candidateSet);\n          sums.push(candidateSum);\n        }\n      }\n    }\n    return sums[utils.random(0,sums.length - 1)];\n  },\n}\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <StarMatch />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}