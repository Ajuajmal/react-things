{"version":3,"sources":["App/App.js","serviceWorker.js","index.js"],"names":["Button","props","onClick","increment","App","getRandomInt","x","Math","floor","random","useState","counter","setCounter","setRandom","incrCounter","incrvalues","y","map","key","type","placeholder","value","onChange","event","isNaN","target","parseFloat","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4OAIA,SAASA,EAAOC,GAEd,OAAO,4BAAQC,QADO,kBAAMD,EAAMC,QAAQD,EAAME,aACRF,EAAME,WA4BjCC,MA1Bf,WACE,IAAMC,EAAc,SAACC,GAAD,OAAOC,KAAKC,MAAMD,KAAKE,SAASF,KAAKC,MAAMF,KADlD,EAEiBI,mBAASL,EAAa,MAFvC,mBAENM,EAFM,KAEGC,EAFH,OAGeF,mBAASL,EAAa,MAHrC,mBAGNI,EAHM,KAGEI,EAHF,KAMPC,EAAc,SAACX,GAAD,OAAeS,EAAWD,EAAQR,IAChDY,EAAa,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,IAAI,KAC7C,OAAQ,oCAAE,6BACR,4BAAQb,QALO,SAACI,GAAQ,IAAMU,EAAGX,EAAa,WAC9CQ,EAAUG,GAAGJ,EAAWI,KAIxB,UAAmCP,GAClCM,EAAWE,KAAI,SAAAX,GAAC,OAAI,kBAACN,EAAD,CAAQG,UAAWG,EAAGJ,QAASY,EAAaI,IAAKZ,QAEtE,2BACEa,KAAK,OACLC,YAAY,eACZC,MAASV,EACTW,SAAa,SAACC,GAAD,OAAWC,MAAMD,EAAME,OAAOJ,OAAST,EAAW,GAAGA,EAAWc,WAAWH,EAAME,OAAOJ,WAEvG,4BAAQnB,QAAU,WAAMU,EAAW,GAAGC,EAAU,KAAhD,UACA,6BACGE,EAAWE,KAAI,SAAAX,GAAC,OAAI,kBAACN,EAAD,CAAQG,WAAYG,EAAGJ,QAASY,EAAaI,IAAKZ,UChBzDqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.08e1ef0e.chunk.js","sourcesContent":["import React, {useState} from 'react';\n// /import logo from '../logo.svg';\nimport './App.css';\n\nfunction Button(props){\n  const handleOnclick = () => props.onClick(props.increment)\n  return <button onClick={handleOnclick}>{props.increment}</button>;\n}\nfunction App() {\n  const getRandomInt= (x) => Math.floor(Math.random()*Math.floor(x));\n  const [counter, setCounter] = useState(getRandomInt(100));\n  const [random, setRandom] = useState(getRandomInt(1000));\n  const randomfn = (x) => { const y= getRandomInt(123456789);\n    setRandom(y);setCounter(y)};\n  const incrCounter = (increment) => setCounter(counter+increment)\n  const incrvalues = [1,2,3,4,5,6,7,8,9,10,100,1000]\n  return (<><div>\n    <button onClick={randomfn}>random {random}</button>\n    {incrvalues.map(x => <Button increment={x} onClick={incrCounter} key={x}/>)}\n</div>\n    <input\n      type=\"text\"\n      placeholder=\"input number\"\n      value = {counter}\n      onChange = { (event) => isNaN(event.target.value) ? setCounter(0):setCounter(parseFloat(event.target.value))}\n    />\n    <button onClick ={()=> {setCounter(0);setRandom(0)}}> reset</button>\n    <div>\n      {incrvalues.map(x => <Button increment={-x} onClick={incrCounter} key={x}/>)}\n  </div>\n    </>\n\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\n//import Hello from './App/App';\nimport App from './App/App';\n//import HelloJSX from './App/AppJSX2';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);\n\n/*\nReactDOM.render(\n  React.createElement(HelloJSX,null),\n    document.getElementById('root')\n);\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <HelloJSX />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n*/\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}