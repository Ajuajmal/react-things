{"version":3,"sources":["serviceWorker.js","config.js","App/App.js","index.js"],"names":["Boolean","window","location","hostname","match","db","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","database","testData","Card","deleteData","props","login","profileData","this","className","src","avatar_url","alt","name","company","onClick","React","Component","CardList","state","dataReady","profiles","keyData","map","user","i","toLowerCase","splice","ref","remove","setState","prevState","removeUser","console","log","on","querySnapShot","data","val","Object","entries","profile","some","push","githubUser","key","Form","userName","addData","handleSubmit","event","a","goOnline","preventDefault","resp","undefined","axios","get","onSubmit","child","set","setTimeout","type","value","placeholder","onChange","target","required","App","addNewProfile","title","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.34d74268.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import firebase from 'firebase';\n\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_apiKey,\n  authDomain: process.env.REACT_APP_authDomain,\n  databaseURL:process.env.REACT_APP_databaseURL,\n  projectId: process.env.REACT_APP_projectId,\n  storageBucket: process.env.REACT_APP_storageBucket,\n  messagingSenderId: process.env.REACT_APP_messagingSenderId,\n  appId: process.env.REACT_APP_appId,\n  measurementId: process.env.REACT_APP_measurementId\n};\n// Initialize Firebase\nlet app = firebase.initializeApp(firebaseConfig);\n\nexport const db = app.database();\n","import React from 'react';\nimport './App.scss';\nimport {db} from '../config';\nimport axios from 'axios';\n\nconst testData = [\n];\n\n\n\nclass Card extends React.Component {\n  deleteData = () => {\n    this.props.deleteData(this.props.login);\n  }\n  render(){\n    const profileData = this.props\n    return(\n      <div className=\"github-profile\">\n        <img src={profileData.avatar_url} alt ={profileData.name} />\n        <div className=\"info\">\n          <div className=\"name\">{profileData.name}</div>\n          <div className=\"company\"> {profileData.company}</div>\n          <button onClick={this.deleteData}>Remove</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass CardList extends React.Component {\n  state = {\n    dataReady: false,\n    profiles:this.props.profiles,\n  }\n  deleteData = (keyData) => {\n    this.state.profiles.map((user,i) => user.login.toLowerCase() === keyData.toLowerCase() ? testData.splice(i,1):{})\n    db.ref('githubProfiles/' + keyData).remove();\n    this.setState(prevState => ({profiles:testData}))\n  }\n\n  componentDidMount() {\n    db.ref('/githubProfiles').on('value', querySnapShot => {\n      let data = querySnapShot.val() ? querySnapShot.val() : {};\n      Object.entries(data).map((profile) => testData.some( user => user.login.toLowerCase() === profile[1].login.toLowerCase()) ? {}:testData.push(profile[1]));\n      this.setState({dataReady:true});\n    });\n  }\nremoveUser = () => {console.log(\"click\")}\n  // Array [Array [\"Raj\", Object { name: \"Raju\" }], Array [\"Ajmal\", Object { name: \"AJU\" }]] example DS From above op\n  render(){\n    if (this.state.dataReady) {\n      return (this.state.profiles.map((githubUser,i) => <Card deleteData = {this.deleteData} removeUser={this.removeUser} key = {i} {...githubUser}/>));\n    } else {\n      return (\n        <div className=\"spinner\">\n          <span className=\"spinner-inner-1\"></span>\n          <span className=\"spinner-inner-2\"></span>\n          <span className=\"spinner-inner-3\"></span>\n        </div>\n      );\n    }\n  }\n}\n\nclass Form extends React.Component {\n  state = { userName: '',\n  addData:'',\n};\n  handleSubmit = async (event) => {\n    db.goOnline();\n      event.preventDefault();\n    if(!testData.some( user => user.login.toLowerCase() === this.state.userName.toLowerCase())) {\n\n\n    this.setState( prevState => (\n\n      {addData:`fetching ${this.state.userName}`}\n          ));\n    let resp = undefined;\n    try {\n    resp = await axios.get(`https://api.github.com/users/${this.state.userName}`);\n      this.props.onSubmit(resp.data);\n    db.ref('/githubProfiles').child(resp.data.login).set(resp.data);\n    this.setState( prevState => (\n\n      {addData:`successfully fetched ${this.state.userName}`}\n          ));\n    } catch(err){\n      this.setState( prevState => (\n\n        {addData:`no user found with user id ${this.state.userName}`}\n      ));\n    }\n\n        } else {\n\n          this.setState( prevState => (\n\n            {addData:'user already found'}\n          ));\n        }\n        setTimeout( () => this.setState( prevState => (\n\n          {addData:''}\n        )),8000);\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit} >\n        <input\n          type=\"text\"\n          value={this.state.userName}\n          placeholder=\"GitHub Username\"\n          onChange={ event => this.setState({ userName: event.target.value })}\n          required\n        />\n        <button> Add Dev </button>\n        <div className=\"message\">{this.state.addData}</div>\n      </form>\n    );\n  }\n}\n\n\nclass App extends React.Component {\n  state = {\n    profiles: testData,\n\n  };\n  addNewProfile = (profileData) => {\n    if(!this.state.profiles.some((user) => user.login === profileData.login)){\n    this.setState( prevState => (\n\n        {profiles:[...prevState.profiles, profileData]}\n          ));\n}\n}\n\n\n\n  render () {\n    return (\n      <div>\n        <div className=\"header\">{this.props.title}</div>\n        <Form onSubmit={this.addNewProfile} />\n        <CardList profiles={this.state.profiles} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\n\n\n//import AppF from './App/Using-Function';\n//import AppFP from './App/Using-Func-Dir-Props';\n//import AppAF from './App/Using-Arrow-Func';\n//import AppC from './App/Using-Class';\n//import AppICSS from './App/Using-InlineCSS';\n//import AppDwoF from './App/Final-App-Design-without-Form';\n\nimport App from './App/App';\nReactDOM.render(\n  <React.StrictMode>\n    <App title=\"Github Profile Cards\"/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}