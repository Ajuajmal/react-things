{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","Table","props","getKeys","Object","keys","this","data","getHeader","map","key","index","toUpperCase","getRowsData","items","row","bind","React","Component","RenderRow","submitForm","contentType","endpoint","setResponse","axios","url","method","headers","then","response","catch","error","App","useState","file","setFile","resp","setResp","dataready","setDataready","uploadWithFormData","formData","FormData","append","msg","console","log","x","uploadWithText_File","className","type","name","onChange","e","target","files","value","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.eba515ce.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// App.js\n\nimport React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport axios from 'axios';\n\nconst API_BASE = \"https://rapi.ajmalaju.com\"\n\n\nclass Table extends React.Component {\n\n constructor(props){\n super(props);\n this.getHeader = this.getHeader.bind(this);\n this.getRowsData = this.getRowsData.bind(this);\n this.getKeys = this.getKeys.bind(this);\n }\n\n getKeys = function(){\n  return Object.keys(this.props.data[0]);\n  }\n\n  getHeader = function(){\n   var keys = this.getKeys();\n   return keys.map((key, index)=>{\n   return <th key={key}>{key.toUpperCase()}</th>\n   })\n   }\n\n\n   getRowsData = function(){\n var items = this.props.data;\n var keys = this.getKeys();\n return items.map((row, index)=>{\n return <tr key={index}><RenderRow key={index} data={row} keys={keys}/></tr>\n })\n }\n\n render() {\n return (\n <div>\n <table>\n <thead>\n <tr>{this.getHeader()}</tr>\n </thead>\n <tbody>\n {this.getRowsData()}\n </tbody>\n </table>\n </div>\n\n );\n }\n}\n\n\nconst RenderRow = (props) =>{\n    return props.keys.map((key, index)=>{\n    return <td key={props.data[key]}>{props.data[key]}</td>\n    })\n   }\n\nfunction submitForm(contentType, data, endpoint, setResponse) {\n axios({\n url: `${API_BASE}${endpoint}`,\n method: 'POST',\n data: data,\n headers: {\n 'Content-Type': contentType\n }\n }).then((response) => {\n setResponse(response.data);\n }).catch((error) => {\n setResponse(\"error\");\n })\n}\n\nfunction App() {\n const [title, setTitle] = useState(\"\");\n const [file, setFile] = useState(null);\n const [desc, setDesc] = useState(\"\");\n const [resp, setResp] =useState([\"\",]);\n const [dataready, setDataready] =useState(null)\n\n function uploadWithFormData(){\n   setDataready(\"Sending\")\n const formData = new FormData();\n formData.append(\"req\", file);\n\n\n submitForm(\"multipart/form-data\", formData, '/v1/file/read',(msg) => {\n   console.log(msg.map(x => x[\"total\"] ))\n   setResp(msg);\n   setDataready(null)\n });\n }\n\n function uploadWithText_File(){\n   setDataready(\"Sending\")\n const formData = new FormData();\n formData.append(\"req\", file);\n submitForm(\"multipart/form-data\", formData, '/v1/file/read/table',(msg) => {\n   setResp(msg);\n   setDataready(null)\n });\n }\n\nif(dataready == 'Sending')\nreturn (\n<div className=\"App\">\n<h2>Upload Form</h2>\n<form>\n<label>\nCSV Files :\n<input type=\"file\" name=\"file\" onChange={(e) => setFile(e.target.files[0])} />\n</label>\n\n\n\n<input type=\"button\" value=\"Get Data\" onClick={uploadWithFormData} />\n\n</form>\n<br />\n<form>\n<label>\nText Files :\n<input type=\"file\" name=\"file\" onChange={(e) => setFile(e.target.files[0])} />\n</label>\n\n\n\n<input type=\"button\" value=\"Get Data\" onClick={uploadWithText_File} />\n\n</form>\n<h1>response</h1>\n <h6>Loading ...</h6>\n\n</div>\n);\nelse\n return (\n <div className=\"App\">\n <h2>Upload Form</h2>\n <form>\n <label>\n CSV Files :\n <input type=\"file\" name=\"file\" onChange={(e) => setFile(e.target.files[0])} />\n </label>\n\n\n\n <input type=\"button\" value=\"Get Data\" onClick={uploadWithFormData} />\n\n </form>\n <br />\n <form>\n <label>\n Text Files :\n <input type=\"file\" name=\"file\" onChange={(e) => setFile(e.target.files[0])} />\n </label>\n\n\n\n <input type=\"button\" value=\"Get Data\" onClick={uploadWithText_File} />\n\n </form>\n <h1>response</h1>\n\n\n<Table data={resp}/>\n\n </div>\n );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}